{"version":3,"sources":["webpack:///src/helperComponents/Autocomplete.vue","webpack:///./src/helperComponents/Autocomplete.vue?bf18"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AACA;AACA;AACA,wBADA;AAEA;AACA;AAAA;AAAA;AAAA,KADA;AAEA;AAAA;AAAA;AAAA,KAFA;AAGA;AAAA;AAAA;AAAA,KAHA;AAIA;AAAA;AAAA;AAAA,KAJA;AAKA;AAAA;AAAA;AAAA,KALA;AAMA;AAAA;AAAA;AAAA,KANA;AAOA;AAAA;AAAA;AAAA,KAPA;AAQA;AAAA;AAAA;AARA,GAFA;AAYA,MAZA,kBAYA;AACA;AACA,eADA;AAEA,wBAFA;AAGA;AAHA;AAKA,GAlBA;AAmBA;AACA,gBADA,0BACA;AACA;AACA,KAHA;AAIA,gBAJA,0BAIA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;;AACA;AACA,SAHA,EAGA,KAHA;AAIA,OALA;AAMA,KAXA;AAYA,sBAZA,gCAYA;AACA;AACA;AAdA,GAnBA;AAmCA;AACA,mBADA,2BACA,MADA,EACA;AACA;;AACA,iCAEA;AAEA,KAPA;AAQA,gBARA,wBAQA,IARA,EAQA;AACA;AACA;AACA;AACA;AACA,KAbA;AAcA,SAdA,iBAcA,UAdA,EAcA;AACA;AACA;;AACA;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;AAHA;AAKA,KAtBA;AAuBA,UAvBA,kBAuBA,UAvBA,EAuBA;AACA;AACA;AACA,KA1BA;AA2BA,UA3BA,kBA2BA,UA3BA,EA2BA;AACA;AACA;AACA,KA9BA;AA+BA,UA/BA,kBA+BA,UA/BA,EA+BA;AACA;AACA;AACA,KAlCA;AAmCA,QAnCA,gBAmCA,UAnCA,EAmCA;AACA;AACA;AArCA,GAnCA;AA0EA,SA1EA,qBA0EA;AACA;AACA;AACA;AACA;AA9EA,G;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.232812382e87448f744a.hot-update.js","sourcesContent":["<script>\r\nimport filter from 'lodash/filter'\r\nexport default {\r\n    name: 'lsautocomplete',\r\n    props: {\r\n        dataList: {type: Array, required: true},\r\n        searchableKeys: {type: Array, default: ['name','title']},\r\n        showKey: {type: String, default: 'name'},\r\n        valueKey: {type: String|Boolean, default: false},\r\n        matchType: {type: String, default: 'fuzzy'},\r\n        itemClass: {type: String, default: ''},\r\n        inputClass:  {type: String, default: ''},\r\n        value: {default: null}\r\n    },\r\n    data(){\r\n        return {\r\n            input: '',\r\n            forceClosed: false,\r\n            selectedIndex: 0,\r\n        }\r\n    },\r\n    computed: {\r\n        showDropdown() {\r\n            return this.input != '';\r\n        },\r\n        filteredList() {\r\n            return filter(this.dataList, (listItem) => {\r\n                return this.searchableKeys.reduce((coll, key) => {\r\n                    if(listItem[key] == undefined) { return coll; }\r\n                    return (coll || this.match(listItem[key]));\r\n                }, false);\r\n            });\r\n        },\r\n        currentItemsHeight() {\r\n            (this.filteredList.length*28)+'px';\r\n        }\r\n    },\r\n    methods: {\r\n        processKeyPress($event) {\r\n            this.forceClosed=false;\r\n            if($event.key == 'down') {\r\n\r\n            }\r\n\r\n        },\r\n        itemSelected(item) {\r\n            const result = this.valueKey===false ? item : item[this.valueKey];\r\n            this.input = item[this.showKey];\r\n            this.$emit('input', result);\r\n            this.forceClosed=true;\r\n        },\r\n        match(comparable) {\r\n            this.$log.log(`Matching ${comparable} to ${this.input} with ${this.matchType}-Method`);\r\n            let result = true;\r\n            switch(this.matchType) {\r\n                case 'fuzzy': return this._fuzzy(comparable);\r\n                case 'exact': return this._exact(comparable);\r\n                case 'start': return this._start(comparable);\r\n            }\r\n        },\r\n        _fuzzy(comparable) {\r\n            const regExp = new RegExp(\".*\"+this.input+\".*\");\r\n            return regExp.test(comparable);\r\n        },\r\n        _exact(comparable) {\r\n            const regExp = new RegExp(this.input);\r\n            return regExp.test(comparable);\r\n        },\r\n        _start(comparable) {\r\n            const regExp = new RegExp(this.input+\".*\");\r\n            return regExp.test(comparable);\r\n        },\r\n        lazy(comparable) {\r\n            return (comparable.toLowerCase().indexOf(this.input.toLowerCase()) > -1);\r\n        },\r\n    },\r\n    mounted() {\r\n        if(this.value != '') {\r\n            this.input = this.value;\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<template>\r\n    <div class=\"scoped-autocomplete-input-container\" :class=\"itemClass\">\r\n        <input type=\"text\" class=\"form-control\" :class=\"inputClass\" v-model=\"input\" @keypress=\"processKeyPress\"/>\r\n        <ul class=\"scoped-autocomplete-list\" v-show=\"showDropdown && !forceClosed\" :style=\"{height: currentItemsHeight}\">\r\n            <li \r\n                v-for=\"(item,i) in filteredList\" \r\n                :key=\"'autocomplete-'+i\"\r\n                @click=\"itemSelected(item)\"\r\n                class=\"scoped-autocomplete-list-item\"\r\n                :class=\"selectedIndex == i ? 'selected':''\"\r\n            >\r\n                {{item[showKey]}}\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n    .scoped-autocomplete-input-container {\r\n        position: relative\r\n    }\r\n    .scoped-autocomplete-list {\r\n        position: absolute;\r\n        top: 24px;\r\n        left:0;\r\n        width: 90%;\r\n        padding:0;\r\n        margin: 4px 5%;\r\n        overflow: auto;\r\n        border: 1px solid #212121;\r\n        background-color: #fff;\r\n        list-style: none;\r\n    }\r\n    .scoped-autocomplete-list-item {\r\n        &:hover,&.selected { background-color: #dedede; }\r\n        padding: 4px 6px;\r\n        border-bottom: 1px solid #929292;\r\n        &:last-of-type {\r\n            border-bottom: none;\r\n        }\r\n    }\r\n</style>\r\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"scoped-autocomplete-input-container\",\n      class: _vm.itemClass\n    },\n    [\n      _c(\"input\", {\n        directives: [\n          {\n            name: \"model\",\n            rawName: \"v-model\",\n            value: _vm.input,\n            expression: \"input\"\n          }\n        ],\n        staticClass: \"form-control\",\n        class: _vm.inputClass,\n        attrs: { type: \"text\" },\n        domProps: { value: _vm.input },\n        on: {\n          keypress: _vm.processKeyPress,\n          input: function($event) {\n            if ($event.target.composing) {\n              return\n            }\n            _vm.input = $event.target.value\n          }\n        }\n      }),\n      _c(\n        \"ul\",\n        {\n          directives: [\n            {\n              name: \"show\",\n              rawName: \"v-show\",\n              value: _vm.showDropdown && !_vm.forceClosed,\n              expression: \"showDropdown && !forceClosed\"\n            }\n          ],\n          staticClass: \"scoped-autocomplete-list\",\n          style: { height: _vm.currentItemsHeight }\n        },\n        _vm._l(_vm.filteredList, function(item, i) {\n          return _c(\n            \"li\",\n            {\n              key: \"autocomplete-\" + i,\n              staticClass: \"scoped-autocomplete-list-item\",\n              class: _vm.selectedIndex == i ? \"selected\" : \"\",\n              on: {\n                click: function($event) {\n                  return _vm.itemSelected(item)\n                }\n              }\n            },\n            [\n              _vm._v(\n                \"\\n            \" + _vm._s(item[_vm.showKey]) + \"\\n        \"\n              )\n            ]\n          )\n        }),\n        0\n      )\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"],"sourceRoot":""}