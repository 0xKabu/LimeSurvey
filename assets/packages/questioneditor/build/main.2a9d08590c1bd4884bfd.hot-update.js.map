{"version":3,"sources":["webpack:///src/helperComponents/SaveLabelSet.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AAEA;AACA,wBADA;AAEA,mEAFA;AAGA;AACA;AAAA;AAAA;AAAA,KADA;AAEA;AAAA;AAAA;AAAA,KAFA;AAGA;AAAA;AAAA;AAAA,KAHA;AAIA;AAAA;AAAA;AAAA,KAJA;AAKA;AAAA;AAAA;AAAA;AALA,GAHA;AAUA,MAVA,kBAUA;AACA;AACA;AADA;AAIA,GAfA;AAgBA;AACA,WADA,qBACA;AAAA;;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA,OAPA;AAQA;AACA,kCADA;AAEA,6BAFA;AAGA;AAHA;AAKA,kDACA;AAAA;;AAAA;AAAA,OADA,EAEA;AAAA;;AAAA;AAAA,OAFA;AAIA;AAxBA;AAhBA,G","file":"main.2a9d08590c1bd4884bfd.hot-update.js","sourcesContent":["\r\n<script>\r\nimport keys from 'lodash/keys';\r\nimport merge from 'lodash/merge';\r\nimport foreach from 'lodash/forEach';\r\n\r\nimport AjaxMixin from '../mixins/runAjax';\r\n\r\nexport default {\r\n    name: 'SaveAsLabelSet',\r\n    mixins: [AjaxMixin],\r\n    props: {\r\n        dataSet: {type: Object, required: true},\r\n        scaleId: {type: Number, required: true},\r\n        type: {type: String, required: true},\r\n        typedef: {type: String, required: true},\r\n        typekey: {type: String, required: true},\r\n    },\r\n    data() {\r\n        return {\r\n            labelName: '',\r\n\r\n        }\r\n    },\r\n    methods: {\r\n        confirm() {\r\n            const dataSetTosend = merge({}, this.dataSet);\r\n\r\n            delete dataSetTosend[this.typekey];\r\n            dataSetTosend.code = this.dataSet[this.typekey];\r\n\r\n            foreach(this.$store.state.languages, (language, lngKey) => {\r\n\r\n                let tmpLangObj = merge({}, this.dataSet[lngKey]);\r\n                tmpLangObj.title = tmpLangObj[this.typedef];\r\n                delete tmpLangObj[this.typedef];\r\n                dataSetTosend[lngKey] = tmpLangObj;\r\n\r\n            });\r\n            const payload = {\r\n                label_name: this.labelName,\r\n                labels: dataSetTosend,\r\n                languages: keys(this.$store.state.languages).join(' ')\r\n            }\r\n            this.$store.dispatch('saveAsLabelSet', ).then(\r\n                (result) => { LS.LsGlobalNotifier.create(result.message, result.classes); this.$emit('close'); },\r\n                error => {this.$log.error(error); this.$emit('close'); }\r\n            );\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<template>\r\n    <div class=\"panel panel-default\">\r\n        <div class=\"panel-heading\">\r\n            <h3 class=\"panel-title\">{{'Save as labelset' | translate}}</h3>\r\n        </div>\r\n        <div class=\"panel-body\">\r\n            <div class=\"container-fluid\">\r\n                <div class=\"row\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"exampleInputEmail1\">{{ \"Name for label set\" | translate}}</label>\r\n                        <input type=\"text\" class=\"form-control\" v-model=\"labelName\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"panel-body text-right\">\r\n            <button @click.prevent=\"confirm\" class=\"btn btn-success\">{{ 'Confirm' | translate }}</button>\r\n            <button @click.prevent=\"$emit('close')\" class=\"btn btn-error\">{{\"Cancel\" | translate }}</button>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<style>\r\n\r\n</style>\r\n"],"sourceRoot":""}